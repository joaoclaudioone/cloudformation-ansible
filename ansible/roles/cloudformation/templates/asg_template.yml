AWSTemplateFormatVersion: 2010-09-09
Description: This template create an alb, asg with a cpu based policy scaling
Parameters:
  ParentVPCStack:
    Description: Stack created with cloudformation that has our network informations
    Type: String
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: c5.large
    ConstraintDescription: must be a valid EC2 instance type.
  Listener:
    Description: Listener Port
    Type: String
    Default: 80
  ALBTGPort:
    Description: ApplicationLoadBalancer Port
    Type: String
    Default: 8080
  AppPort:
    Description: Application port
    Type: String
    Default: 8080
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ImageId:
    Description: The aplication Ami
    Type: 'String'
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcCIDR:
    Description: The range of IP of the Vpc
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEMail
          Protocol: email
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: [{'Fn::ImportValue': !Sub '${ParentVPCStack}-PublicSubnets'}]
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      MetricsCollection:
        - Granularity: '1Minute'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      NotificationConfiguration:
        TopicARN: !Ref NotificationTopic
        NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH'
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
    CreationPolicy:
       ResourceSignal:
        Timeout: PT10M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # update aws packages
            yum update -y aws-cfn-bootstrap aws-cli
            #sending signals to cloudformation
            /opt/aws/bin/cfn-signal -e $? \
            --stack ${AWS::StackName} \
            --resource AutoScalingGroup \
            --region ${AWS::Region}
            #dos2unix
            dos2unix /app/bin/run.sh
            # set app permissions
            chown appuser:appgroup /app/bin/run.sh
            # restart Application
            supervisorctl restart all

  ScalingPolicyUp:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'
  ScaleDownPolicyDown:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref ScalingPolicyUp
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref ScaleDownPolicyDown
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Split
         - ","
         - Fn::ImportValue:
             !Sub '${ParentVPCStack}-PublicSubnets'
      SecurityGroups:
        - !Ref ALBSecurityGroup
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref Listener
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: !Ref ALBTGPort
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPCID'}
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          CidrIp: !Ref VpcCIDR
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPCID'}
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access from internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref Listener
          ToPort: !Ref ALBTGPort
          CidrIp: 0.0.0.0/0
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPCID'}
  CloudFront:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt ApplicationLoadBalancer.DNSName
          Id: !Ref KeyName
          CustomOriginConfig:
            HTTPPort: !Ref Listener
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
          OriginCustomHeaders:
            - HeaderName: 'X-Glovo-Systems-Engineer-Candidate'
              HeaderValue: '1'
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: !Ref KeyName
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        CustomErrorResponses:
        - ErrorCode: '404'
          ResponsePagePath: "/error-pages/404.html"
          ResponseCode: '200'
          ErrorCachingMinTTL: '30'
        PriceClass: PriceClass_100
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
